{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37943acb-b13c-4854-9d7b-dafaf6a392cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# app.py â€” OnePlan AI Story App (executive-friendly Streamlit)\n",
    "# Run locally: streamlit run app.py\n",
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import plotly.express as px\n",
    "\n",
    "DATA_DIR   = Path(\"data/processed\")\n",
    "ASSETS_DIR = Path(\"assets\")\n",
    "REPORTS_DIR= Path(\"reports\")\n",
    "\n",
    "st.set_page_config(\n",
    "    page_title=\"OnePlan AI â€” Media Budget Optimizer\",\n",
    "    page_icon=\"ðŸ§ \",\n",
    "    layout=\"wide\"\n",
    ")\n",
    "\n",
    "# ---------- Load helpers ----------\n",
    "@st.cache_data\n",
    "def load_csv(path: Path):\n",
    "    if not path.exists():\n",
    "        return None\n",
    "    try:\n",
    "        return pd.read_csv(path)\n",
    "    except Exception:\n",
    "        return None\n",
    "\n",
    "def pct(x, nd=1):\n",
    "    return f\"{100*x:.{nd}f}%\"\n",
    "\n",
    "# ---------- Load artifacts ----------\n",
    "summary = load_csv(DATA_DIR/\"part6_equal_vs_optimized_summary.csv\") \\\n",
    "       or load_csv(DATA_DIR/\"part5_equal_vs_optimized_summary.csv\")\n",
    "mroi    = load_csv(DATA_DIR/\"marginal_roi_summary.csv\")\n",
    "alloc_c = load_csv(DATA_DIR/\"optimal_spend_conversions.csv\")\n",
    "alloc_r = load_csv(DATA_DIR/\"optimal_spend_reach.csv\")\n",
    "\n",
    "# Response curves: list available and show overlay if user wants\n",
    "curve_dir = DATA_DIR/\"response_curves\"\n",
    "curve_files = sorted(curve_dir.glob(\"*_response_curve.csv\")) if curve_dir.exists() else []\n",
    "\n",
    "# ---------- Header ----------\n",
    "st.title(\"ðŸ§  OnePlan AI â€” Intelligent Media Budget Optimizer\")\n",
    "st.subheader(\"A concise story for decision-makers: what changed, why it changed, and the impact.\")\n",
    "\n",
    "# ---------- TL;DR KPIs ----------\n",
    "with st.container():\n",
    "    st.markdown(\"### TL;DR: Impact\")\n",
    "    if summary is None or len(summary) < 2:\n",
    "        st.info(\"Run Part-5 and Part-6 to generate summaries (CSV files).\")\n",
    "    else:\n",
    "        # Expect rows: 0 conversions, 1 reach fraction\n",
    "        conv = summary.iloc[0]\n",
    "        rech = summary.iloc[1]\n",
    "        c1, c2, c3, c4, c5, c6 = st.columns(6)\n",
    "        c1.metric(\"Conversions (Equal)\", f\"{conv['equal_split']:.1f}\")\n",
    "        c2.metric(\"Conversions (Optimized)\", f\"{conv['optimized']:.1f}\",\n",
    "                  delta=f\"{conv['lift_%']:.1f}%\")\n",
    "        c3.metric(\"Conversion Lift\", f\"{conv['lift_%']:.1f}%\")\n",
    "\n",
    "        c4.metric(\"Deduped Reach (Equal)\", f\"{100*rech['equal_split']:.1f}%\")\n",
    "        c5.metric(\"Deduped Reach (Optimized)\", f\"{100*rech['optimized']:.1f}%\",\n",
    "                  delta=f\"{rech['lift_%']:.1f}%\")\n",
    "        c6.metric(\"Reach Lift\", f\"{rech['lift_%']:.1f}%\")\n",
    "\n",
    "        st.caption(\"Note: Choosing conversions as objective can reduce reach â€” that trade-off is explicit.\")\n",
    "\n",
    "st.divider()\n",
    "\n",
    "# ---------- Why it changed (allocations & marginal ROI) ----------\n",
    "st.markdown(\"### Why the Budget Moved\")\n",
    "colA, colB = st.columns(2)\n",
    "\n",
    "with colA:\n",
    "    st.markdown(\"**Optimal Spend by Channel (Conversions objective)**\")\n",
    "    if alloc_c is not None and len(alloc_c):\n",
    "        fig = px.bar(alloc_c.sort_values(\"optimal_spend_conversions\", ascending=False),\n",
    "                     x=\"channel\", y=\"optimal_spend_conversions\",\n",
    "                     labels={\"optimal_spend_conversions\":\"USD\", \"channel\":\"Channel\"})\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "    else:\n",
    "        st.info(\"Missing `data/processed/optimal_spend_conversions.csv`\")\n",
    "\n",
    "with colB:\n",
    "    st.markdown(\"**Marginal ROI at Optimum (Î” conversions per $1)**\")\n",
    "    if mroi is not None and len(mroi):\n",
    "        fig = px.bar(mroi.sort_values(\"marginal_roi_per_dollar\", ascending=False),\n",
    "                     x=\"channel\", y=\"marginal_roi_per_dollar\",\n",
    "                     labels={\"marginal_roi_per_dollar\":\"Î” Conversions / $1\", \"channel\":\"Channel\"})\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "    else:\n",
    "        st.info(\"Missing `data/processed/marginal_roi_summary.csv`\")\n",
    "\n",
    "st.caption(\"Insight: Budget flows toward channels with higher marginal ROI until the curves saturate or constraints bind.\")\n",
    "\n",
    "st.divider()\n",
    "\n",
    "# ---------- Equal vs optimized visuals ----------\n",
    "st.markdown(\"### Equal vs Optimized\")\n",
    "col1, col2 = st.columns(2)\n",
    "with col1:\n",
    "    p = ASSETS_DIR/\"p6_equal_vs_opt_conversions.png\"\n",
    "    if p.exists():\n",
    "        st.image(str(p), caption=\"Conversions: Equal vs Optimized\")\n",
    "    else:\n",
    "        st.info(\"Missing `assets/p6_equal_vs_opt_conversions.png`\")\n",
    "with col2:\n",
    "    p = ASSETS_DIR/\"p6_equal_vs_opt_reach.png\"\n",
    "    if p.exists():\n",
    "        st.image(str(p), caption=\"Deduped Reach (% Audience): Equal vs Optimized\")\n",
    "    else:\n",
    "        st.info(\"Missing `assets/p6_equal_vs_opt_reach.png`\")\n",
    "\n",
    "st.divider()\n",
    "\n",
    "# ---------- How it works (optional response curves overlay) ----------\n",
    "st.markdown(\"### How It Works (Modeling & Optimization)\")\n",
    "st.write(\n",
    "    \"- Per-channel response curves model diminishing returns (spend â†’ predicted conversions). \"\n",
    "    \"We learn them via Linear/XGBoost and smooth them to reduce noise.\"\n",
    ")\n",
    "st.write(\n",
    "    \"- An optimizer allocates a fixed budget to maximize conversions (or reach), \"\n",
    "    \"subject to per-channel bounds derived from observed spend ranges.\"\n",
    ")\n",
    "\n",
    "with st.expander(\"Show Response Curve Overlays (from Part-3)\"):\n",
    "    if not curve_files:\n",
    "        st.info(\"No response curve CSVs found under `data/processed/response_curves/`.\")\n",
    "    else:\n",
    "        ch_to_file = {f.name.replace(\"_response_curve.csv\",\"\"): f for f in curve_files}\n",
    "        chosen = st.multiselect(\"Select channels to plot\", list(ch_to_file.keys()), default=list(ch_to_file.keys())[:3])\n",
    "        import plotly.graph_objects as go\n",
    "        fig = go.Figure()\n",
    "        for ch in chosen:\n",
    "            dfc = pd.read_csv(ch_to_file[ch])\n",
    "            # prefer boosted\n",
    "            pred_cols = [c for c in dfc.columns if c.startswith(\"pred_conversions\")]\n",
    "            boosted = [c for c in pred_cols if \"xgb\" in c.lower()]\n",
    "            col = boosted[0] if boosted else (pred_cols[0] if pred_cols else None)\n",
    "            if col is None: continue\n",
    "            fig.add_trace(go.Scatter(x=dfc[\"spend\"], y=dfc[col], mode=\"lines\", name=ch))\n",
    "        fig.update_layout(xaxis_title=\"Spend ($)\", yaxis_title=\"Predicted Conversions\")\n",
    "        st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "st.divider()\n",
    "\n",
    "# ---------- Downloads ----------\n",
    "st.markdown(\"### Downloads\")\n",
    "rpt = REPORTS_DIR/\"OnePlan_Executive_Summary.md\"\n",
    "if rpt.exists():\n",
    "    st.download_button(\"Download Executive Summary (Markdown)\", data=rpt.read_text(encoding=\"utf-8\"), file_name=\"OnePlan_Executive_Summary.md\")\n",
    "else:\n",
    "    st.info(\"Generate `reports/OnePlan_Executive_Summary.md` in Part-6 to enable download.\")\n",
    "\n",
    "if summary is not None:\n",
    "    st.download_button(\"Download Equal vs Optimized Summary (CSV)\",\n",
    "                       data=summary.to_csv(index=False),\n",
    "                       file_name=\"equal_vs_optimized_summary.csv\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "oneplan (venv)",
   "language": "python",
   "name": "oneplan"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
